
#+TITLE: My Config Files
#+AUTHOR: Alexander Neville

Configuration files are usually hidden with a leading =.=, hence the name /dotfiles/. They typically reside in a user's home directory and work on a user by user basis, i.e. they are not global system settings.

Most of the files in this repository are written or edited by hand, while others are copied from elsewhere. I am storing these files in this repository, even if they exist elsewhere, for my own ease of access. Many of the scripts and executables used in these config files are stored and managed in another repository: =alexander-neville/scripts=.

* Stow

As plain text files, a user's configs are suitable for versioning with a source control system like git. I use a program called /GNU stow/ for managing the deployment of my dotfiles. It automatically puts symbolic links in the right places when you run:

#+begin_src shell

stow -t ~/ <dir_name>

#+end_src

Each top-level directory in this repo is a conceptual group of configuration files, e.g. =./wm= contains the configuration files for a few different window managers. The contents of the directory resemble my home directory. e.g.

#+begin_src

~/
|--.xmonad/
| |-xmobarrc
| └-xmonad.hs
└--.config
  |--bspwm/
  | |--bspwmrc
  | └--bin/
  |--polybar/
  | |--colours
  | └--config
  |--sxhkd/
  | └--sxhkdrc
  |--awesome/
  | └-- ...
  └--qtile/
    └--config.py

#+end_src

* Programs

I have customised configuration files for all of these applications:

** Vi/Vim/Neovim

All of the above are /modal/ command line text-editors. This is a nice feature as you can navigate text with regular letters like =j= and =k= and make changes by dropping into /insert/ mode when you are at the right place. As keyboard driven movement in vi-inspired editors is so fast and easy, there is no need to use the mouse. The vi keybindings have also inspired the keybindings in some of my other config files.

My configuration for nvim 0.5 is in another repository: =alexander-neville/nvim_config=. This repo is still home to an old nvim 0.4 config, as this is the version packaged by most distributions.

** Emacs

Emacs is a really flexible text-editor/operating system (depending how you see it). I tend to use it most for things other than programming, including writing /org-mode/ documents (like this one!) and using the /magit/ git client. I have configured emacs from scratch and wrote a /literate/ configuration file, stored in =.emacs.d=. Now I use /doom/ emacs, a configuration framework for emacs with sensible defaults and many good optimisations. Find out more here: https://github.com/hlissner/doom-emacs

** Window Managers

While a fully fledged desktop environment can be convenient to begin with, a stand alone /window manager/ has far greater potential for comfort and efficiency.

A desktop environment includes a window manager, but also provides a suite of other utilities, like a gui settings app, a file manager, an image viewer, etc. Using a window manager leaves you with just a window manager, giving you greater freedom to configure your graphical environment. Admittedly, most window managers do a bit more than that, like handling hotkeys, setting wallpaper and providing a status bar.

Most stand alone window managers can automatically /tile/ windows on the screen, so you don't have to drag them around with the mouse. These are sometimes called /tiling window managers/.

*** Xmonad

Xmonad is the first WM I tried. It is written and configured in /haskell/, a purely functional programming language. It is quite minimal on its own and the status bar I use is /xmobar/. The default layout is the /master and stack/, where one window is given half the screen, while the others split the second half vertically amongst themselves.

*** Qtile

Qtile is written and configured in python, making it easy for many people to get it working. Qtile has many layouts, including the /MonadTall/, but my favourite is /Columns/ as you can easily create /sub-layouts/ and hide windows you are not using. Qtile had its own bar built-in.

*** DWM

DWM is written and configured in C. The window manager needs to be recompiled every time a change is made to the source code. My configuration of DWM is found in the =alexander-neville/suckless_tools= repository.

*** Awesome

Awesome is inspired by DWM and was initially a fork of the window manager. Awesome is very flexible and has many features builtin. The configuration is written in lua and the default config file is about 600 lines long! I have split parts of this config into a more manageable folder structure, so I can easily configure Awesome.

*** BSPWM

BSPWM is a just a window manager. BSPWM is controlled via the shell using the =bspc= command. The configuration file contains a set of commands to be run when the window manager starts, which may include some BSPWM commands. You can easily make scripts that manage your windows with BSPWM. In addition, you can bind a command to a hotkey, using a hotkey daemon like /sxhkd/, which I have also configured. I use /polybar/ for a status bar.

** Shell

I currently use zsh as my default shell. I also have a =.bashrc=, as bash is still a very widespread and useful shell. Both of these shell configs source aliases from my =.aliasrc=.

** Apache

I often use the Apache web server on Arch Linux, so I store a configuration file that has all the right settings for a basic PHP set-up.

** Run Launchers

I have used dmenu in the past, but I prefer to use rofi now. I use these programs for launching applications and selecting custom options from scripts. The themes for rofi are found in this repository, while the accompanying scripts come from my /scripts/ repo.

** Etc.

I also store copies of all the less interesting files like =.Xresources= and =.Xmodmap=. I use =.Xresources= to set and deploy colourschemes to other applications. I also keep =.xinitrc= for starting a xorg session.

* Screenshots

[[./screenshots/my_config_nord.png]]

[[./screenshots/my_config_gruvbox.png]]

[[./screenshots/my_config_dracula.png]]

[[./screenshots/old_bspwm_gruvbox.png]]

[[./screenshots/old_bspwm_marine.png]]

[[./screenshots/old_bspwm_pink.png]]
